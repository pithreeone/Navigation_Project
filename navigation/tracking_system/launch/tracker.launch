<launch>
    <!-- Set Frame Name -->
    <arg name="map_frame" default="map"/>
    <arg name="odom_frame" default="odom"/>
    <arg name="base_frame" default="base_link"/>
    <arg name="laser_frame" default="base_scan"/>

    <!-- Set port name -->
    <arg name="lidar_port" default="/dev/USB1"/>
    <arg name="odometry_port" default="/dev/USB0-1"/>
    <arg name="mechanism_port" default="/dev/USB0-3"/>

    <arg name="sim_or_run" default="run" doc="program mode [sim (Simulation), run (Run robot)]"/>
    <arg name="mode" default="zebra" doc=""/>

    <node pkg="tf" type="static_transform_publisher" name="base_link2laser_link" args="0 0 0.3 0 0 0 base_link laser_link 100"  if="$(eval (arg('sim_or_run')=='sim'))"/>

    <!-- Odometry -->
    <node pkg="localization_run" type="odometry" name="odometry" output="screen" if="$(eval (arg('sim_or_run')=='run'))">
        <param name="odom_frame" value="$(arg odom_frame)"/>
        <param name="base_frame" value="$(arg base_frame)"/>
        <param name="rate"  value="50.0"/>
    </node>

    <!-- YDLidar firmware-->
    <include file="$(find ydlidar_ros_driver)/launch/G6_G7.launch" if="$(eval (arg('sim_or_run')=='run' and arg('mode')!='zebra'))">
        <arg name="base_frame" value="$(arg base_frame)"/>
        <arg name="laser_frame" value="$(arg laser_frame)"/>
        <arg name="port" value="$(arg lidar_port)"/>
    </include>


    <!-- Odometry firmware -->
    <node pkg="rosserial_server" type="serial_node" name="rosserial_server_dp" output="screen" if="$(eval (arg('sim_or_run')=='run'))">
        <param name="port" value="$(arg odometry_port)"/>
        <param name="baud" value="115200" />
        <rosparam>
            require:
                publishers: [ Toposition ]
                subscribers: [ cmd_vel ]
        </rosparam>
    </node>

    <!-- Laser filters -->
    <include file="$(find laser_filters)/launch/range_filter.launch" if="$(eval (arg('mode') != 'zebra'))">
    </include>

    <node name="obstacle_extractor" pkg="obstacle_detector" type="obstacle_extractor_node" if="$(eval (arg('mode') != 'zebra'))">
        <param name="active"               value="true"/>
        <param name="use_scan"             value="true"/>
        <param name="use_pcl"              value="false"/>

        <param name="use_split_and_merge"    value="true"/>
        <param name="circles_from_visibles"  value="true"/>
        <param name="discard_converted_segments" value="true"/>
        <param name="transform_coordinates"  value="true"/>

        <param name="min_group_points"     value="4"/>

        <param name="max_group_distance"   value="0.05"/>
        <param name="distance_proportion"  value="0.00628"/>
        <param name="max_split_distance"   value="0.1"/>
        <param name="max_merge_separation" value="0.05"/>
        <param name="max_merge_spread"     value="0.2"/>
        <param name="max_circle_radius"    value="0.2"/>
        <param name="radius_enlargement"   value="0.1"/>

        <param name="frame_id"             value="base_link"/>
        <remap from="scan" to="scan_filtered"/>
    </node>

    <!-- Pre-processing -->
    <node pkg="tracking_system" type="ekf_tracker" name="ekf_tracker" output="screen" if="$(eval (arg('mode') != 'zebra'))">
        <rosparam file="$(find tracking_system)/config/ekf_tracker.yaml" command="load"/>
    </node>

    <!-- Navigation: tracking target -->
    <node pkg="tracking_system" type="tracker" name="tracker" output="screen"/>

    <!-- Simulation: target -->
    <!-- <node pkg="tracking_system" type="tracking_target_publisher.py" name="tracking_target_publisher" output="screen"/> -->

    <!-- RVIZ -->
    <node pkg="rviz" type="rviz" name="rviz_navi_slam" args="-d $(find tracking_system)/rviz/tracker.rviz" if="$(eval (arg('sim_or_run')=='sim'))"/>


    <!-- Simulation -->
    
    <!-- <include file="$(find gazebo_simulation)/launch/simul_robot_dynamic_people.launch" if="$(eval (arg('sim_or_run')=='sim'))">
        <arg name="odom_type" value="omni"/>
    </include> -->

    <param name="use_sim_time" value="true" if="$(eval (arg('sim_or_run')=='sim'))"/>

    <node name="play_bag" pkg="rosbag" type="play" output="screen" args="--clock --pause --loop -r 0.5 $(find tracking_system)/data/two_person.bag" 
     if="$(eval (arg('sim_or_run')=='sim'))"/>
     
    <node pkg="tf" type="static_transform_publisher" name="odom2base_link_publisher" args="0 0 0 0 0 0 odom base_link 100" if="$(eval (arg('sim_or_run')=='sim'))"/>

</launch>