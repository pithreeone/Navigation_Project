<launch>
    <!-- Set Frame Name -->
    <arg name="map_frame" default="map"/>
    <arg name="odom_frame" default="odom"/>
    <arg name="base_frame" default="base_link"/>
    <arg name="laser_frame" default="base_scan"/>

    <!-- Set Mode -->
    <arg name="mode" default="localization" doc="robot mode [slam, localization]"/>
    <arg name="sim_or_run" default="sim" doc="program mode [sim (Simulation), run (Run robot)]"/>
    <arg name="odom_type" default="omni" doc="omni type [diff, omni]"/>
    <arg name="slam_method" default="icp" doc="slam method [gmapping, icp]"/>

    <!-- Set port name -->
    <arg name="lidar_port" default="/dev/USB1"/>
    <arg name="odometry_port" default="/dev/USB0-1"/>
    <arg name="mechanism_port" default="/dev/USB0-3"/>

    <!-- GAZEBO -->
    <include file="$(find gazebo_simulation)/launch/simul_robot.launch" if="$(eval (arg('sim_or_run')=='sim'))">
        <arg name="odom_type" value="$(arg odom_type)"/>
    </include>
    <!-- <include file="$(find gazebo_simulation)/launch/simul_robot_dynamic_people.launch" if="$(eval (arg('sim_or_run')=='sim'))">
        <arg name="odom_type" value="$(arg odom_type)"/>
    </include> -->


    <!-- Odometry -->
    <node pkg="localization_run" type="odometry" name="odometry" output="screen" if="$(eval (arg('sim_or_run')=='run'))">
        <param name="odom_frame" value="$(arg odom_frame)"/>
        <param name="base_frame" value="$(arg base_frame)"/>
        <param name="rate"  value="50.0"/>
        <param name="angle_multiplier"  value="1.19"/>
    </node>

    <!-- YDLidar firmware-->
    <include file="$(find ydlidar_ros_driver)/launch/G6_G7.launch" if="$(eval (arg('sim_or_run')=='run'))">
        <arg name="base_frame" value="$(arg base_frame)"/>
        <arg name="laser_frame" value="$(arg laser_frame)"/>
        <arg name="port" value="$(arg lidar_port)"/>
    </include>

    <!-- Laser filters -->
    <include file="$(find laser_filters)/launch/range_filter.launch">
    </include>

    <!-- Odometry firmware -->
    <node pkg="rosserial_server" type="serial_node" name="rosserial_server_dp" output="screen" if="$(eval (arg('sim_or_run')=='run'))">
        <param name="port" value="$(arg odometry_port)"/>
        <param name="baud" value="115200" />
        <rosparam>
            require:
                publishers: [ Toposition ]
                subscribers: [ cmd_vel ]
        </rosparam>
    </node>

    <!-- Mechanism firmware -->
    <node pkg="rosserial_server" type="serial_node" name="rosserial_server_sb" output="screen" if="$(eval (arg('sim_or_run')=='run'))">
        <param name="port" value="$(arg mechanism_port)"/>
        <param name="baud" value="115200" />
        <rosparam>
            require:
                publishers: [ amr_mission_return ]
                subscribers: [ amr_mission ]

        </rosparam>
    </node>

    <!-- bmp280 firmware -->
    <node pkg="sensor_firmware" type="bmp280_publisher.py" name="bmp280_publisher" output="screen" if="$(eval (arg('sim_or_run')=='run'))"/>

    <!-- Altitude to Floor -->
    <node pkg="chores" type="altitude2floor" name="altitude2floor" output="screen" if="$(eval (arg('sim_or_run')=='run'))"/>

    <!-- elevator status classifier -->
    <include file="$(find elevator_classifier)/launch/elevator.launch">
        <arg name="base_frame" value="$(arg base_frame)"/>
        <arg name="laser_frame" value="$(arg laser_frame)"/>
    </include>


    <!-- GMAPPING -->
    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="log" if="$(eval (arg('mode')=='slam') and (arg('sim_or_run')=='sim') and (arg('slam_method')=='gmapping'))">
        <remap from="scan" to="scan_filtered" />
        <param name="base_frame" value="$(arg base_frame)"/>
        <param name="odom_frame" value="$(arg odom_frame)"/>
        <param name="map_frame"  value="$(arg map_frame)"/>
        <rosparam command="load" file="$(find localization_run)/config/gmapping_params.yaml"/>
    </node>

    <!-- ICP -->
    <!-- <include file="$(find localization_run)/launch/icp_slam.launch" if="$(eval (arg('mode')=='slam') and (arg('sim_or_run')=='sim') and (arg('slam_method')=='icp'))">
    </include> -->

    <!-- AMCL -->
    <node pkg="amcl" type="amcl" name="amcl" output="log" if="$(eval (arg('mode')=='localization'))">
        <remap from="scan" to="scan_filtered" />
        <!-- <remap from="map" to="loc_map" /> -->
        <remap from="/diagnostics" to="diagnostics" />

        <param name="map_frame" value="$(arg map_frame)"/>
        <param name="odom_frame" value="$(arg odom_frame)"/>
        <param name="base_frame" value="$(arg base_frame)"/>
        <rosparam command="load" file="$(find localization_run)/config/amcl_simul.yaml"  if="$(eval (arg('sim_or_run')=='sim'))"/>
        <rosparam command="load" file="$(find localization_run)/config/amcl_real.yaml"  if="$(eval (arg('sim_or_run')=='run'))"/>
    </node>

    <!-- <node pkg="rviz" type="rviz" name="rviz_slam" args="-d $(find localization_run)/rviz/sim_mapping.rviz"/> -->

    <!-- <include file="$(find localization_run)/launch/image_pipeline.launch"/> -->
</launch>